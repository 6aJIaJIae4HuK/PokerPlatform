// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/PokerMessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PokerPlatformCommon.Proto {

  /// <summary>Holder for reflection information generated from Proto/PokerMessages.proto</summary>
  public static partial class PokerMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/PokerMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PokerMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlQcm90by9Qb2tlck1lc3NhZ2VzLnByb3RvEhlQb2tlclBsYXRmb3JtQ29t",
            "bW9uLlByb3RvIiQKBVF1ZXJ5EgwKBExlZnQYASABKAUSDQoFUmlnaHQYAiAB",
            "KAUiGAoGQW5zd2VyEg4KBlJlc3VsdBgBIAEoBSIfCg5UaW1lc3RhbXBFdmVu",
            "dBINCgVWYWx1ZRgBIAEoAyJkCgRDYXJkEi0KBFN1aXQYASABKA4yHy5Qb2tl",
            "clBsYXRmb3JtQ29tbW9uLlByb3RvLlN1aXQSLQoEUmFuaxgCIAEoDjIfLlBv",
            "a2VyUGxhdGZvcm1Db21tb24uUHJvdG8uUmFuayIpChVDb25uZWN0VG9UYWJs",
            "ZVJlcXVlc3QSEAoIUGxheWVySWQYASABKAQiJwoGUGxheWVyEgoKAklkGAEg",
            "ASgEEhEKCVN0YWNrU2l6ZRgCIAEoBCIkCgNQb3QSDwoHUGxheWVycxgBIAMo",
            "BRIMCgRTaXplGAIgASgEImYKBEhhbmQSLgoFQ2FyZDEYASABKAsyHy5Qb2tl",
            "clBsYXRmb3JtQ29tbW9uLlByb3RvLkNhcmQSLgoFQ2FyZDIYAiABKAsyHy5Q",
            "b2tlclBsYXRmb3JtQ29tbW9uLlByb3RvLkNhcmQiSwoMTnVsbGFibGVIYW5k",
            "EjIKBEhhbmQYASABKAsyHy5Qb2tlclBsYXRmb3JtQ29tbW9uLlByb3RvLkhh",
            "bmRIAIgBAUIHCgVfSGFuZCLbAQoER2FtZRIsCgRQb3RzGAEgAygLMh4uUG9r",
            "ZXJQbGF0Zm9ybUNvbW1vbi5Qcm90by5Qb3QSNgoFSGFuZHMYAiADKAsyJy5Q",
            "b2tlclBsYXRmb3JtQ29tbW9uLlByb3RvLk51bGxhYmxlSGFuZBIzCgpUYWJs",
            "ZUNhcmRzGAMgAygLMh8uUG9rZXJQbGF0Zm9ybUNvbW1vbi5Qcm90by5DYXJk",
            "EjgKDUN1cnJlbnRTdHJlZXQYBCABKA4yIS5Qb2tlclBsYXRmb3JtQ29tbW9u",
            "LlByb3RvLlN0cmVldCLWAQoJVGFibGVWaWV3EjIKB1BsYXllcnMYASADKAsy",
            "IS5Qb2tlclBsYXRmb3JtQ29tbW9uLlByb3RvLlBsYXllchI5CgtDdXJyZW50",
            "R2FtZRgCIAEoCzIfLlBva2VyUGxhdGZvcm1Db21tb24uUHJvdG8uR2FtZUgA",
            "iAEBEhIKClNtYWxsQmxpbmQYAyABKAQSEAoIQmlnQmxpbmQYBCABKAQSDAoE",
            "QW50ZRgFIAEoBBIWCg5CdXR0b25Qb3NpdGlvbhgGIAEoBUIOCgxfQ3VycmVu",
            "dEdhbWUiTgoTQ29ubmVjdFRvVGFibGVSZXBseRI3CglUYWJsZVZpZXcYASAB",
            "KAsyJC5Qb2tlclBsYXRmb3JtQ29tbW9uLlByb3RvLlRhYmxlVmlldyo3CgRT",
            "dWl0EgoKBkhFQVJUUxAAEgkKBUNMVUJTEAESCgoGU1BJREVTEAISDAoIRElB",
            "TU9ORFMQAyqIAQoEUmFuaxIHCgNUV08QABIJCgVUSFJFRRABEggKBEZPVVIQ",
            "AhIICgRGSVZFEAMSBwoDU0lYEAQSCQoFU0VWRU4QBRIJCgVFSUdIVBAGEggK",
            "BE5JTkUQBxIHCgNURU4QCBIICgRKQUNLEAkSCQoFUVVFRU4QChIICgRLSU5H",
            "EAsSBwoDQUNFEAwqTgoGU3RyZWV0EgsKB1BSRUZMT1AQABIICgRGTE9QEAES",
            "CAoEVFVSThACEgkKBVJJVkVSEAMSDAoIU0hPV0RPV04QBBIKCgZQQVlPRkYQ",
            "BWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PokerPlatformCommon.Proto.Suit), typeof(global::PokerPlatformCommon.Proto.Rank), typeof(global::PokerPlatformCommon.Proto.Street), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PokerPlatformCommon.Proto.Query), global::PokerPlatformCommon.Proto.Query.Parser, new[]{ "Left", "Right" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokerPlatformCommon.Proto.Answer), global::PokerPlatformCommon.Proto.Answer.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokerPlatformCommon.Proto.TimestampEvent), global::PokerPlatformCommon.Proto.TimestampEvent.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokerPlatformCommon.Proto.Card), global::PokerPlatformCommon.Proto.Card.Parser, new[]{ "Suit", "Rank" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokerPlatformCommon.Proto.ConnectToTableRequest), global::PokerPlatformCommon.Proto.ConnectToTableRequest.Parser, new[]{ "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokerPlatformCommon.Proto.Player), global::PokerPlatformCommon.Proto.Player.Parser, new[]{ "Id", "StackSize" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokerPlatformCommon.Proto.Pot), global::PokerPlatformCommon.Proto.Pot.Parser, new[]{ "Players", "Size" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokerPlatformCommon.Proto.Hand), global::PokerPlatformCommon.Proto.Hand.Parser, new[]{ "Card1", "Card2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokerPlatformCommon.Proto.NullableHand), global::PokerPlatformCommon.Proto.NullableHand.Parser, new[]{ "Hand" }, new[]{ "Hand" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokerPlatformCommon.Proto.Game), global::PokerPlatformCommon.Proto.Game.Parser, new[]{ "Pots", "Hands", "TableCards", "CurrentStreet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokerPlatformCommon.Proto.TableView), global::PokerPlatformCommon.Proto.TableView.Parser, new[]{ "Players", "CurrentGame", "SmallBlind", "BigBlind", "Ante", "ButtonPosition" }, new[]{ "CurrentGame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokerPlatformCommon.Proto.ConnectToTableReply), global::PokerPlatformCommon.Proto.ConnectToTableReply.Parser, new[]{ "TableView" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Suit {
    [pbr::OriginalName("HEARTS")] Hearts = 0,
    [pbr::OriginalName("CLUBS")] Clubs = 1,
    [pbr::OriginalName("SPIDES")] Spides = 2,
    [pbr::OriginalName("DIAMONDS")] Diamonds = 3,
  }

  public enum Rank {
    [pbr::OriginalName("TWO")] Two = 0,
    [pbr::OriginalName("THREE")] Three = 1,
    [pbr::OriginalName("FOUR")] Four = 2,
    [pbr::OriginalName("FIVE")] Five = 3,
    [pbr::OriginalName("SIX")] Six = 4,
    [pbr::OriginalName("SEVEN")] Seven = 5,
    [pbr::OriginalName("EIGHT")] Eight = 6,
    [pbr::OriginalName("NINE")] Nine = 7,
    [pbr::OriginalName("TEN")] Ten = 8,
    [pbr::OriginalName("JACK")] Jack = 9,
    [pbr::OriginalName("QUEEN")] Queen = 10,
    [pbr::OriginalName("KING")] King = 11,
    [pbr::OriginalName("ACE")] Ace = 12,
  }

  public enum Street {
    [pbr::OriginalName("PREFLOP")] Preflop = 0,
    [pbr::OriginalName("FLOP")] Flop = 1,
    [pbr::OriginalName("TURN")] Turn = 2,
    [pbr::OriginalName("RIVER")] River = 3,
    [pbr::OriginalName("SHOWDOWN")] Showdown = 4,
    [pbr::OriginalName("PAYOFF")] Payoff = 5,
  }

  #endregion

  #region Messages
  public sealed partial class Query : pb::IMessage<Query>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Query> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokerPlatformCommon.Proto.PokerMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query(Query other) : this() {
      left_ = other.left_;
      right_ = other.right_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query Clone() {
      return new Query(this);
    }

    /// <summary>Field number for the "Left" field.</summary>
    public const int LeftFieldNumber = 1;
    private int left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "Right" field.</summary>
    public const int RightFieldNumber = 2;
    private int right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Query);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Query other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Left != other.Left) return false;
      if (Right != other.Right) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Left != 0) hash ^= Left.GetHashCode();
      if (Right != 0) hash ^= Right.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Left != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Left);
      }
      if (Right != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Right);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Left != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Left);
      }
      if (Right != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Right);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Left != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Left);
      }
      if (Right != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Right);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Query other) {
      if (other == null) {
        return;
      }
      if (other.Left != 0) {
        Left = other.Left;
      }
      if (other.Right != 0) {
        Right = other.Right;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Left = input.ReadInt32();
            break;
          }
          case 16: {
            Right = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Left = input.ReadInt32();
            break;
          }
          case 16: {
            Right = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Answer : pb::IMessage<Answer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Answer> _parser = new pb::MessageParser<Answer>(() => new Answer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Answer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokerPlatformCommon.Proto.PokerMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Answer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Answer(Answer other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Answer Clone() {
      return new Answer(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Answer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Answer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Answer other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimestampEvent : pb::IMessage<TimestampEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimestampEvent> _parser = new pb::MessageParser<TimestampEvent>(() => new TimestampEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimestampEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokerPlatformCommon.Proto.PokerMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimestampEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimestampEvent(TimestampEvent other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimestampEvent Clone() {
      return new TimestampEvent(this);
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimestampEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimestampEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimestampEvent other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Card : pb::IMessage<Card>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokerPlatformCommon.Proto.PokerMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card(Card other) : this() {
      suit_ = other.suit_;
      rank_ = other.rank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "Suit" field.</summary>
    public const int SuitFieldNumber = 1;
    private global::PokerPlatformCommon.Proto.Suit suit_ = global::PokerPlatformCommon.Proto.Suit.Hearts;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PokerPlatformCommon.Proto.Suit Suit {
      get { return suit_; }
      set {
        suit_ = value;
      }
    }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 2;
    private global::PokerPlatformCommon.Proto.Rank rank_ = global::PokerPlatformCommon.Proto.Rank.Two;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PokerPlatformCommon.Proto.Rank Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Suit != other.Suit) return false;
      if (Rank != other.Rank) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Suit != global::PokerPlatformCommon.Proto.Suit.Hearts) hash ^= Suit.GetHashCode();
      if (Rank != global::PokerPlatformCommon.Proto.Rank.Two) hash ^= Rank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Suit != global::PokerPlatformCommon.Proto.Suit.Hearts) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Suit);
      }
      if (Rank != global::PokerPlatformCommon.Proto.Rank.Two) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Suit != global::PokerPlatformCommon.Proto.Suit.Hearts) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Suit);
      }
      if (Rank != global::PokerPlatformCommon.Proto.Rank.Two) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Suit != global::PokerPlatformCommon.Proto.Suit.Hearts) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Suit);
      }
      if (Rank != global::PokerPlatformCommon.Proto.Rank.Two) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Suit != global::PokerPlatformCommon.Proto.Suit.Hearts) {
        Suit = other.Suit;
      }
      if (other.Rank != global::PokerPlatformCommon.Proto.Rank.Two) {
        Rank = other.Rank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Suit = (global::PokerPlatformCommon.Proto.Suit) input.ReadEnum();
            break;
          }
          case 16: {
            Rank = (global::PokerPlatformCommon.Proto.Rank) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Suit = (global::PokerPlatformCommon.Proto.Suit) input.ReadEnum();
            break;
          }
          case 16: {
            Rank = (global::PokerPlatformCommon.Proto.Rank) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ConnectToTableRequest : pb::IMessage<ConnectToTableRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConnectToTableRequest> _parser = new pb::MessageParser<ConnectToTableRequest>(() => new ConnectToTableRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectToTableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokerPlatformCommon.Proto.PokerMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToTableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToTableRequest(ConnectToTableRequest other) : this() {
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToTableRequest Clone() {
      return new ConnectToTableRequest(this);
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectToTableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectToTableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectToTableRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Player : pb::IMessage<Player>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokerPlatformCommon.Proto.PokerMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      id_ = other.id_;
      stackSize_ = other.stackSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "StackSize" field.</summary>
    public const int StackSizeFieldNumber = 2;
    private ulong stackSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StackSize {
      get { return stackSize_; }
      set {
        stackSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (StackSize != other.StackSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (StackSize != 0UL) hash ^= StackSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (StackSize != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(StackSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (StackSize != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(StackSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (StackSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StackSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.StackSize != 0UL) {
        StackSize = other.StackSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            StackSize = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            StackSize = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Pot : pb::IMessage<Pot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Pot> _parser = new pb::MessageParser<Pot>(() => new Pot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokerPlatformCommon.Proto.PokerMessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pot(Pot other) : this() {
      players_ = other.players_.Clone();
      size_ = other.size_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pot Clone() {
      return new Pot(this);
    }

    /// <summary>Field number for the "Players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_players_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> players_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 2;
    private ulong size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      if (Size != other.Size) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (Size != 0UL) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      players_.WriteTo(output, _repeated_players_codec);
      if (Size != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      players_.WriteTo(ref output, _repeated_players_codec);
      if (Size != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (Size != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pot other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      if (other.Size != 0UL) {
        Size = other.Size;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 16: {
            Size = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 16: {
            Size = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Hand : pb::IMessage<Hand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Hand> _parser = new pb::MessageParser<Hand>(() => new Hand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokerPlatformCommon.Proto.PokerMessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hand(Hand other) : this() {
      card1_ = other.card1_ != null ? other.card1_.Clone() : null;
      card2_ = other.card2_ != null ? other.card2_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hand Clone() {
      return new Hand(this);
    }

    /// <summary>Field number for the "Card1" field.</summary>
    public const int Card1FieldNumber = 1;
    private global::PokerPlatformCommon.Proto.Card card1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PokerPlatformCommon.Proto.Card Card1 {
      get { return card1_; }
      set {
        card1_ = value;
      }
    }

    /// <summary>Field number for the "Card2" field.</summary>
    public const int Card2FieldNumber = 2;
    private global::PokerPlatformCommon.Proto.Card card2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PokerPlatformCommon.Proto.Card Card2 {
      get { return card2_; }
      set {
        card2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card1, other.Card1)) return false;
      if (!object.Equals(Card2, other.Card2)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card1_ != null) hash ^= Card1.GetHashCode();
      if (card2_ != null) hash ^= Card2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (card1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card1);
      }
      if (card2_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Card2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (card1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card1);
      }
      if (card2_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Card2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card1);
      }
      if (card2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hand other) {
      if (other == null) {
        return;
      }
      if (other.card1_ != null) {
        if (card1_ == null) {
          Card1 = new global::PokerPlatformCommon.Proto.Card();
        }
        Card1.MergeFrom(other.Card1);
      }
      if (other.card2_ != null) {
        if (card2_ == null) {
          Card2 = new global::PokerPlatformCommon.Proto.Card();
        }
        Card2.MergeFrom(other.Card2);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card1_ == null) {
              Card1 = new global::PokerPlatformCommon.Proto.Card();
            }
            input.ReadMessage(Card1);
            break;
          }
          case 18: {
            if (card2_ == null) {
              Card2 = new global::PokerPlatformCommon.Proto.Card();
            }
            input.ReadMessage(Card2);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (card1_ == null) {
              Card1 = new global::PokerPlatformCommon.Proto.Card();
            }
            input.ReadMessage(Card1);
            break;
          }
          case 18: {
            if (card2_ == null) {
              Card2 = new global::PokerPlatformCommon.Proto.Card();
            }
            input.ReadMessage(Card2);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NullableHand : pb::IMessage<NullableHand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NullableHand> _parser = new pb::MessageParser<NullableHand>(() => new NullableHand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NullableHand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokerPlatformCommon.Proto.PokerMessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullableHand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullableHand(NullableHand other) : this() {
      hand_ = other.hand_ != null ? other.hand_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullableHand Clone() {
      return new NullableHand(this);
    }

    /// <summary>Field number for the "Hand" field.</summary>
    public const int HandFieldNumber = 1;
    private global::PokerPlatformCommon.Proto.Hand hand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PokerPlatformCommon.Proto.Hand Hand {
      get { return hand_; }
      set {
        hand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NullableHand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NullableHand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hand, other.Hand)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hand_ != null) hash ^= Hand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (hand_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (hand_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NullableHand other) {
      if (other == null) {
        return;
      }
      if (other.hand_ != null) {
        if (hand_ == null) {
          Hand = new global::PokerPlatformCommon.Proto.Hand();
        }
        Hand.MergeFrom(other.Hand);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hand_ == null) {
              Hand = new global::PokerPlatformCommon.Proto.Hand();
            }
            input.ReadMessage(Hand);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (hand_ == null) {
              Hand = new global::PokerPlatformCommon.Proto.Hand();
            }
            input.ReadMessage(Hand);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Game : pb::IMessage<Game>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Game> _parser = new pb::MessageParser<Game>(() => new Game());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Game> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokerPlatformCommon.Proto.PokerMessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game(Game other) : this() {
      pots_ = other.pots_.Clone();
      hands_ = other.hands_.Clone();
      tableCards_ = other.tableCards_.Clone();
      currentStreet_ = other.currentStreet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game Clone() {
      return new Game(this);
    }

    /// <summary>Field number for the "Pots" field.</summary>
    public const int PotsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PokerPlatformCommon.Proto.Pot> _repeated_pots_codec
        = pb::FieldCodec.ForMessage(10, global::PokerPlatformCommon.Proto.Pot.Parser);
    private readonly pbc::RepeatedField<global::PokerPlatformCommon.Proto.Pot> pots_ = new pbc::RepeatedField<global::PokerPlatformCommon.Proto.Pot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PokerPlatformCommon.Proto.Pot> Pots {
      get { return pots_; }
    }

    /// <summary>Field number for the "Hands" field.</summary>
    public const int HandsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PokerPlatformCommon.Proto.NullableHand> _repeated_hands_codec
        = pb::FieldCodec.ForMessage(18, global::PokerPlatformCommon.Proto.NullableHand.Parser);
    private readonly pbc::RepeatedField<global::PokerPlatformCommon.Proto.NullableHand> hands_ = new pbc::RepeatedField<global::PokerPlatformCommon.Proto.NullableHand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PokerPlatformCommon.Proto.NullableHand> Hands {
      get { return hands_; }
    }

    /// <summary>Field number for the "TableCards" field.</summary>
    public const int TableCardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PokerPlatformCommon.Proto.Card> _repeated_tableCards_codec
        = pb::FieldCodec.ForMessage(26, global::PokerPlatformCommon.Proto.Card.Parser);
    private readonly pbc::RepeatedField<global::PokerPlatformCommon.Proto.Card> tableCards_ = new pbc::RepeatedField<global::PokerPlatformCommon.Proto.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PokerPlatformCommon.Proto.Card> TableCards {
      get { return tableCards_; }
    }

    /// <summary>Field number for the "CurrentStreet" field.</summary>
    public const int CurrentStreetFieldNumber = 4;
    private global::PokerPlatformCommon.Proto.Street currentStreet_ = global::PokerPlatformCommon.Proto.Street.Preflop;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PokerPlatformCommon.Proto.Street CurrentStreet {
      get { return currentStreet_; }
      set {
        currentStreet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Game);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Game other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pots_.Equals(other.pots_)) return false;
      if(!hands_.Equals(other.hands_)) return false;
      if(!tableCards_.Equals(other.tableCards_)) return false;
      if (CurrentStreet != other.CurrentStreet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pots_.GetHashCode();
      hash ^= hands_.GetHashCode();
      hash ^= tableCards_.GetHashCode();
      if (CurrentStreet != global::PokerPlatformCommon.Proto.Street.Preflop) hash ^= CurrentStreet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pots_.WriteTo(output, _repeated_pots_codec);
      hands_.WriteTo(output, _repeated_hands_codec);
      tableCards_.WriteTo(output, _repeated_tableCards_codec);
      if (CurrentStreet != global::PokerPlatformCommon.Proto.Street.Preflop) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CurrentStreet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pots_.WriteTo(ref output, _repeated_pots_codec);
      hands_.WriteTo(ref output, _repeated_hands_codec);
      tableCards_.WriteTo(ref output, _repeated_tableCards_codec);
      if (CurrentStreet != global::PokerPlatformCommon.Proto.Street.Preflop) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CurrentStreet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pots_.CalculateSize(_repeated_pots_codec);
      size += hands_.CalculateSize(_repeated_hands_codec);
      size += tableCards_.CalculateSize(_repeated_tableCards_codec);
      if (CurrentStreet != global::PokerPlatformCommon.Proto.Street.Preflop) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentStreet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Game other) {
      if (other == null) {
        return;
      }
      pots_.Add(other.pots_);
      hands_.Add(other.hands_);
      tableCards_.Add(other.tableCards_);
      if (other.CurrentStreet != global::PokerPlatformCommon.Proto.Street.Preflop) {
        CurrentStreet = other.CurrentStreet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pots_.AddEntriesFrom(input, _repeated_pots_codec);
            break;
          }
          case 18: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 26: {
            tableCards_.AddEntriesFrom(input, _repeated_tableCards_codec);
            break;
          }
          case 32: {
            CurrentStreet = (global::PokerPlatformCommon.Proto.Street) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            pots_.AddEntriesFrom(ref input, _repeated_pots_codec);
            break;
          }
          case 18: {
            hands_.AddEntriesFrom(ref input, _repeated_hands_codec);
            break;
          }
          case 26: {
            tableCards_.AddEntriesFrom(ref input, _repeated_tableCards_codec);
            break;
          }
          case 32: {
            CurrentStreet = (global::PokerPlatformCommon.Proto.Street) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TableView : pb::IMessage<TableView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TableView> _parser = new pb::MessageParser<TableView>(() => new TableView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokerPlatformCommon.Proto.PokerMessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableView(TableView other) : this() {
      players_ = other.players_.Clone();
      currentGame_ = other.currentGame_ != null ? other.currentGame_.Clone() : null;
      smallBlind_ = other.smallBlind_;
      bigBlind_ = other.bigBlind_;
      ante_ = other.ante_;
      buttonPosition_ = other.buttonPosition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableView Clone() {
      return new TableView(this);
    }

    /// <summary>Field number for the "Players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PokerPlatformCommon.Proto.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::PokerPlatformCommon.Proto.Player.Parser);
    private readonly pbc::RepeatedField<global::PokerPlatformCommon.Proto.Player> players_ = new pbc::RepeatedField<global::PokerPlatformCommon.Proto.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PokerPlatformCommon.Proto.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "CurrentGame" field.</summary>
    public const int CurrentGameFieldNumber = 2;
    private global::PokerPlatformCommon.Proto.Game currentGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PokerPlatformCommon.Proto.Game CurrentGame {
      get { return currentGame_; }
      set {
        currentGame_ = value;
      }
    }

    /// <summary>Field number for the "SmallBlind" field.</summary>
    public const int SmallBlindFieldNumber = 3;
    private ulong smallBlind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SmallBlind {
      get { return smallBlind_; }
      set {
        smallBlind_ = value;
      }
    }

    /// <summary>Field number for the "BigBlind" field.</summary>
    public const int BigBlindFieldNumber = 4;
    private ulong bigBlind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BigBlind {
      get { return bigBlind_; }
      set {
        bigBlind_ = value;
      }
    }

    /// <summary>Field number for the "Ante" field.</summary>
    public const int AnteFieldNumber = 5;
    private ulong ante_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Ante {
      get { return ante_; }
      set {
        ante_ = value;
      }
    }

    /// <summary>Field number for the "ButtonPosition" field.</summary>
    public const int ButtonPositionFieldNumber = 6;
    private int buttonPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ButtonPosition {
      get { return buttonPosition_; }
      set {
        buttonPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      if (!object.Equals(CurrentGame, other.CurrentGame)) return false;
      if (SmallBlind != other.SmallBlind) return false;
      if (BigBlind != other.BigBlind) return false;
      if (Ante != other.Ante) return false;
      if (ButtonPosition != other.ButtonPosition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (currentGame_ != null) hash ^= CurrentGame.GetHashCode();
      if (SmallBlind != 0UL) hash ^= SmallBlind.GetHashCode();
      if (BigBlind != 0UL) hash ^= BigBlind.GetHashCode();
      if (Ante != 0UL) hash ^= Ante.GetHashCode();
      if (ButtonPosition != 0) hash ^= ButtonPosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      players_.WriteTo(output, _repeated_players_codec);
      if (currentGame_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CurrentGame);
      }
      if (SmallBlind != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SmallBlind);
      }
      if (BigBlind != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(BigBlind);
      }
      if (Ante != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Ante);
      }
      if (ButtonPosition != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ButtonPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      players_.WriteTo(ref output, _repeated_players_codec);
      if (currentGame_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CurrentGame);
      }
      if (SmallBlind != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SmallBlind);
      }
      if (BigBlind != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(BigBlind);
      }
      if (Ante != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Ante);
      }
      if (ButtonPosition != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ButtonPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (currentGame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentGame);
      }
      if (SmallBlind != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SmallBlind);
      }
      if (BigBlind != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BigBlind);
      }
      if (Ante != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Ante);
      }
      if (ButtonPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ButtonPosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableView other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      if (other.currentGame_ != null) {
        if (currentGame_ == null) {
          CurrentGame = new global::PokerPlatformCommon.Proto.Game();
        }
        CurrentGame.MergeFrom(other.CurrentGame);
      }
      if (other.SmallBlind != 0UL) {
        SmallBlind = other.SmallBlind;
      }
      if (other.BigBlind != 0UL) {
        BigBlind = other.BigBlind;
      }
      if (other.Ante != 0UL) {
        Ante = other.Ante;
      }
      if (other.ButtonPosition != 0) {
        ButtonPosition = other.ButtonPosition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 18: {
            if (currentGame_ == null) {
              CurrentGame = new global::PokerPlatformCommon.Proto.Game();
            }
            input.ReadMessage(CurrentGame);
            break;
          }
          case 24: {
            SmallBlind = input.ReadUInt64();
            break;
          }
          case 32: {
            BigBlind = input.ReadUInt64();
            break;
          }
          case 40: {
            Ante = input.ReadUInt64();
            break;
          }
          case 48: {
            ButtonPosition = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 18: {
            if (currentGame_ == null) {
              CurrentGame = new global::PokerPlatformCommon.Proto.Game();
            }
            input.ReadMessage(CurrentGame);
            break;
          }
          case 24: {
            SmallBlind = input.ReadUInt64();
            break;
          }
          case 32: {
            BigBlind = input.ReadUInt64();
            break;
          }
          case 40: {
            Ante = input.ReadUInt64();
            break;
          }
          case 48: {
            ButtonPosition = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ConnectToTableReply : pb::IMessage<ConnectToTableReply>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConnectToTableReply> _parser = new pb::MessageParser<ConnectToTableReply>(() => new ConnectToTableReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectToTableReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokerPlatformCommon.Proto.PokerMessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToTableReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToTableReply(ConnectToTableReply other) : this() {
      tableView_ = other.tableView_ != null ? other.tableView_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToTableReply Clone() {
      return new ConnectToTableReply(this);
    }

    /// <summary>Field number for the "TableView" field.</summary>
    public const int TableViewFieldNumber = 1;
    private global::PokerPlatformCommon.Proto.TableView tableView_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PokerPlatformCommon.Proto.TableView TableView {
      get { return tableView_; }
      set {
        tableView_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectToTableReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectToTableReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TableView, other.TableView)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tableView_ != null) hash ^= TableView.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (tableView_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TableView);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (tableView_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TableView);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tableView_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableView);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectToTableReply other) {
      if (other == null) {
        return;
      }
      if (other.tableView_ != null) {
        if (tableView_ == null) {
          TableView = new global::PokerPlatformCommon.Proto.TableView();
        }
        TableView.MergeFrom(other.TableView);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tableView_ == null) {
              TableView = new global::PokerPlatformCommon.Proto.TableView();
            }
            input.ReadMessage(TableView);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (tableView_ == null) {
              TableView = new global::PokerPlatformCommon.Proto.TableView();
            }
            input.ReadMessage(TableView);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
